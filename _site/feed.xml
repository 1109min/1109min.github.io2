<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-06-26T14:39:39+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Lee Seungmin</title><subtitle>My online study room
</subtitle><author><name>Lee Seungmin</name></author><entry><title type="html">Typescript-0</title><link href="http://localhost:4000/typescript/2023-06-24-Typescript_0.html" rel="alternate" type="text/html" title="Typescript-0" /><published>2023-06-24T00:00:00+09:00</published><updated>2023-06-24T00:00:00+09:00</updated><id>http://localhost:4000/typescript/Typescript_0</id><content type="html" xml:base="http://localhost:4000/typescript/2023-06-24-Typescript_0.html"><![CDATA[<h1 id="typescrip-랑-인사하기">Typescrip 랑 인사하기</h1>

<!-- 목차 -->

<p><br /></p>

<h2 id="1-typescript란">1. Typescript란?</h2>
<ul>
  <li>타입스크립트는 자바스크립트에 <code class="language-plaintext highlighter-rouge">타입</code>을 부여한 언어 - 자바스크립트의 확장 언어</li>
  <li>자바스크립트와 달리 브라우저에서 실행하려면 파일을 한 번 <code class="language-plaintext highlighter-rouge">변환</code>해야함(Compile)</li>
</ul>

<h2 id="2-typescript를-쓰는-이유는">2. Typescript를 쓰는 이유는?</h2>
<ul>
  <li>에러 사전 방지</li>
  <li>코드 가이드 및 자동 완성 (개발 생산성 향상)</li>
</ul>

<h3 id="에러-사전-방지">에러 사전 방지</h3>
<p>다음의 예시를 보자.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// math.js</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// math.ts</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">b</span><span class="p">:</span> <span class="kr">number</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>두 코드 모두 두 숫자의 합을 구하는 함수 코드이다. 
코드 실행 결과를 보면,</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="c1">// 30</span>
<span class="nx">sum</span><span class="p">(</span><span class="dl">'</span><span class="s1">10</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">20</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// 1020</span>
</code></pre></div></div>
<p>Js로는 문자열이 들어가 우리가 원하는 결과를 얻을 수 없다.</p>

<p>이와 같은 코드동작을 예방할 수 있다.</p>

<h3 id="코드-자동-완성과-가이드">코드 자동 완성과 가이드</h3>
<p>타입스크립트의 또 다른 장점은 코드를 작성할 때 <code class="language-plaintext highlighter-rouge">개발 툴의 기능</code>을 최대로 활용할 수 있다.</p>
<ul>
  <li>Visual Studio Code는 툴의 내부가 타입스크립트로 되어있어 Ts개발에 최적화되어 있다.
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// math.js</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
<span class="nx">total</span><span class="p">.</span><span class="nx">toLocaleString</span><span class="p">();</span>
</code></pre></div>    </div>
    <p>Js의 경우 <code class="language-plaintext highlighter-rouge">total</code> 타입이 정해져있지 않기 때문에, 자동 완성이 나오지 않는다.</p>
  </li>
</ul>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// math.ts</span>
<span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">b</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="kr">number</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">total</span> <span class="o">=</span> <span class="nx">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
<span class="nx">total</span><span class="p">.</span><span class="nx">toLocaleString</span><span class="p">();</span>
</code></pre></div></div>
<p>하지만 다음과 같이 type을 정하면, <code class="language-plaintext highlighter-rouge">total</code>에 대한 타입이 지정되어 자동 완성이 미리보기된다.</p>

<h2 id="3-typescript-기본-타입">3. Typescript 기본 타입</h2>
<ul>
  <li>Boolean</li>
  <li>Number</li>
  <li>String</li>
  <li>Object</li>
  <li>Array</li>
  <li>Tuple</li>
  <li>Enum</li>
  <li>any</li>
  <li>void</li>
  <li>null</li>
  <li>undefined</li>
  <li>never</li>
</ul>

<h3 id="타입-표기법-type-annotation">타입 표기법 (Type Annotation)</h3>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">:</code>을 이용하여 자바스크립트 코드에 타입을 정의하는 방식</p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">str</span> <span class="p">:</span> <span class="kr">string</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hi</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// String</span>
<span class="kd">let</span> <span class="nx">num</span> <span class="p">:</span> <span class="kr">number</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// Number</span>
<span class="kd">let</span> <span class="nx">isTrue</span> <span class="p">:</span> <span class="nx">boolean</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">// Boolean</span>

<span class="c1">// object</span>

<span class="kd">let</span> <span class="nx">arr</span> <span class="p">:</span> <span class="kr">number</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span> <span class="c1">// Array</span>

<span class="c1">// Tuple</span>
<span class="c1">// 배열의 길이가 고정되고 각 요소의 타입이 지정되어 있는 배열 형식을 의미함</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="p">:</span> <span class="p">[</span><span class="kr">string</span><span class="p">,</span> <span class="kr">number</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">hi</span><span class="dl">'</span><span class="p">,</span> <span class="mi">10</span><span class="p">];</span> <span class="c1">// Tuple</span>

<span class="c1">// Enum</span>
<span class="kr">enum</span> <span class="nx">Avangers</span> <span class="p">{</span> <span class="nx">Capt</span><span class="p">,</span> <span class="nx">IronMan</span><span class="p">,</span> <span class="nx">Thor</span> <span class="p">};</span>
<span class="kd">let</span> <span class="nx">hero</span><span class="p">:</span> <span class="nx">Avengers</span> <span class="o">=</span> <span class="nx">Avengers</span><span class="p">.</span><span class="nx">Capt</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">hero</span><span class="p">:</span> <span class="nx">Avengers</span> <span class="o">=</span> <span class="nx">Avengers</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>

<span class="c1">// any</span>
<span class="kd">let</span> <span class="nx">str</span><span class="p">:</span> <span class="kr">any</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">hi</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">num</span><span class="p">:</span> <span class="kr">any</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">arr</span><span class="p">:</span> <span class="kr">any</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="kc">true</span><span class="p">];</span> <span class="c1">// any</span>

<span class="c1">// void</span>
<span class="kd">function</span> <span class="nx">printSomething</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">sth</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">returnNothing</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span> 

<span class="c1">// Never</span>
<span class="c1">// 함수 끝에 절대 도달하지 않는다는 것을 의미</span>
<span class="kd">function</span> <span class="nx">neverEnd</span><span class="p">():</span> <span class="nx">never</span> <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>

    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Tao He</name></author><category term="Typescript" /><category term="Typescript" /><summary type="html"><![CDATA[Typescrip 랑 인사하기]]></summary></entry></feed>